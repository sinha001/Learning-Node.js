/*
1. Start with Mongoose:
   -- What is Mongoose?
      -> Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.
      -> Mongoose supports both promises and callbacks for asynchronous operations.

   -- Difference between Mongoose vs MongoDB package.
      -> The MongoDB package provides basic functionality to interact with MongoDB, without enforcing structure.
      -> Mongoose builds on MongoDB by adding features like schemas, models, validation, and middleware for better application-level control.

   -- Install Mongoose:
      -> Use `npm install mongoose` to add Mongoose to your project.
*/

// Import Express.js framework
const express = require("express");

// Import configuration for Mongoose connection
require("./config");

// Import the Product model from the `product.js` file
const Product = require("./product");

// Create an Express app
const app = express();

// Enable JSON body parsing for incoming requests
app.use(express.json());

/*
This section defines CRUD operations (Save, Update, Delete, Find) directly using Mongoose.
These functions can be reused as needed.
*/

// Function to save data to MongoDB
const saveInDB = async () => {
  /*
  Create a new instance of the Product model with data.
  Each key corresponds to a field in the schema.
  */
  let data = new Product({
    name: "m8",       // Product name
    brand: "Xiaomi",  // Product brand
    price: 15000,     // Product price
    category: "mobile" // Product category
  });

  /*
  Save the document to MongoDB using the `save` method.
  Returns the saved document, including autogenerated fields like `_id`.
  */
  let result = await data.save();
  console.log(result); // Logs the saved data
};

// Function to update a document in MongoDB
const updateInDB = async () => {
  /*
  Update a document that matches the condition `{ name: "Iphone 15" }`.
  Use `$set` to modify the `price` field.
  */
  let data = await Product.updateOne(
    { name: "Iphone 15" }, // Find condition
    { $set: { price: 95420 } } // Update fields
  );
  console.log(data); // Logs update operation result
};

// Function to delete a document from MongoDB
const deleteInDB = async () => {
  /*
  Delete a document with the condition `{ name: "Iphone 15" }`.
  */
  let data = await Product.deleteOne({ name: "Iphone 15" });
  console.log(data); // Logs delete operation result
};

// Function to find documents in MongoDB
const findInDB = async () => {
  /*
  Retrieve all documents in the `products` collection using `find`.
  */
  let data = await Product.find();
  console.log(data); // Logs the retrieved documents
};

/*
Define Express.js API endpoints for interacting with MongoDB.
This section includes POST, GET, DELETE, PUT, and Search routes.
*/

// POST API to create a new document
app.post("/create", async (req, res) => {
  /*
  Create a new Product using request body data (`req.body`).
  Save it to MongoDB and send the saved data as the response.
  */
  let data = new Product(req.body);
  let result = await data.save();
  res.send(result); // Responds with saved document
});

// GET API to retrieve all documents
app.get("/", async (req, res) => {
  /*
  Retrieve all documents from the `products` collection.
  */
  let data = await Product.find();
  res.send(data); // Responds with all documents
});

// DELETE API to delete a document by `_id`
app.delete("/delete/:_id", async (req, res) => {
  /*
  Delete a document by its `_id` received as a route parameter.
  */
  let data = await Product.deleteOne(req.params); // `req.params` contains `_id`
  res.send(data); // Responds with delete operation result
});

// PUT API to update a document by `_id`
app.put("/update/:_id", async (req, res) => {
  /*
  Update a document by its `_id` received as a route parameter.
  Use `$set` to update fields provided in the request body.
  */
  let data = await Product.updateOne(
    req.params, // Find condition
    { $set: req.body } // Fields to update
  );
  res.send(data); // Responds with update operation result
});

/*
Search API to filter documents based on user input.
*/

// GET API to search documents with single or multiple fields
app.get('/search/:key', async (req, res) => {
  /*
  Search documents where `name` or `brand` contains the search key.
  Use `$or` to specify multiple conditions.
  Use `$regex` for pattern matching (case-insensitive search).
  */
  let data = await Product.find({
    "$or": [
      { name: { $regex: req.params.key, $options: "i" } },  // Search in name
      { brand: { $regex: req.params.key, $options: "i" } } // Search in brand
    ]
  });
  res.send(data); // Responds with matching documents
});

// Start the server on port 5000
app.listen(5000, () => {
  console.log("Server is running..");
});
